
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}



model User {
  user_id       Int       @id @default(autoincrement()) 
  role          String    @db.VarChar(20)
  identifier    String    @db.VarChar(40) @unique
  password      String?   @db.VarChar(255)
  email         String    @db.VarChar(40) @unique
  profile       String?   @db.VarChar(500)
  created_at    DateTime  @default(dbgenerated("NOW()")) @db.DateTime
  update_at     DateTime  @default(dbgenerated("NOW() ON UPDATE NOW()")) @db.DateTime
  affiliations  Affiliation[]

}

model Organization {
  organization_id Int      @id @default(autoincrement())
  name            String   @db.VarChar(30)
  created_at      DateTime @default(dbgenerated("NOW()")) @db.DateTime
  update_at       DateTime @default(dbgenerated("NOW() ON UPDATE NOW()")) @db.DateTime
  affiliations    Affiliation[]
}

model ErrorLog {
  error_log_id Int      @id @default(autoincrement())
  level        String   @db.VarChar(10)
  timestamp    String   @db.VarChar(45)
  message      String   @db.VarChar(500)
}

model Affiliation {
  affiliation_id Int  @default(autoincrement()) @unique
  organization_id Int
  user_id         Int
  hire_date       DateTime?  @db.Date
  job             String?    @db.VarChar(20)
  job_introduce   String?    @db.VarChar(300)
  nickname        String
  company         String?    @db.VarChar(50)
  company_public  Boolean
  created_at      DateTime  @default(dbgenerated("NOW()")) @db.DateTime
  update_at       DateTime  @default(dbgenerated("NOW() ON UPDATE NOW()")) @db.DateTime

  @@id([ affiliation_id, organization_id, user_id ])

  challenges      Challenge[]
  user_challenges UserChallenge[]
  comments Comment[]
  likes         Likes[]

  user            User       @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade)
  organization    Organization @relation(fields: [organization_id], references: [organization_id], onDelete: Cascade, onUpdate: Cascade)


}

model Challenge {
  challenge_id         Int                   @default(autoincrement()) @unique
  affiliation_id       Int
  name                 String                @db.VarChar(40)
  created_at           DateTime  @default(dbgenerated("NOW()")) @db.DateTime
  update_at            DateTime  @default(dbgenerated("NOW() ON UPDATE NOW()")) @db.DateTime
  start_at             DateTime              @db.Date
  finish_at            DateTime              @db.Date
  deposit              Int


  challenge_days       ChallengeDay[]
  challenge_deposit_deductions ChallengeDepositDeduction[]
  user_challenges      UserChallenge[]
  questions            Question[]
 
  affiliation         Affiliation @relation(fields: [affiliation_id], references: [affiliation_id], onDelete: Cascade, onUpdate: Cascade)

  @@id([ challenge_id, affiliation_id ])
}

model Question {
  question_id  Int      @id @default(autoincrement())
  challenge_id Int
  question     String   @db.VarChar(255)
  category     String   @db.VarChar(10)
  created_at   DateTime  @default(dbgenerated("NOW()")) @db.DateTime
  update_at    DateTime  @default(dbgenerated("NOW() ON UPDATE NOW()")) @db.DateTime

  question_tags QuestionTag[]
  question_contents QuestionContent[]

  challenge     Challenge @relation(fields: [challenge_id], references: [challenge_id], onDelete: Cascade, onUpdate: Cascade)
}

model QuestionTag {
  question_tag_id Int      @id @default(autoincrement())
  question_id     Int
  category        String   @db.VarChar(10)

  question        Question @relation(fields: [question_id], references: [question_id], onDelete: Cascade, onUpdate: Cascade)

}

model ChallengeDay {
  challenge_day_id Int      @id @default(autoincrement())
  challenge_id     Int
  day              DateTime                 @db.Date
  created_at       DateTime  @default(dbgenerated("NOW()")) @db.DateTime
  update_at        DateTime  @default(dbgenerated("NOW() ON UPDATE NOW()")) @db.DateTime

  challenge        Challenge @relation(fields: [challenge_id], references: [challenge_id], onDelete: Cascade, onUpdate: Cascade)
}


model ChallengeDepositDeduction {
  challenge_deposit_deduction_id Int      @id @default(autoincrement())
  challenge_id                  Int
  start_count                   Int
  end_count                     Int
  deduction_rate                Int
  created_at                    DateTime  @default(dbgenerated("NOW()")) @db.DateTime
  update_at                     DateTime  @default(dbgenerated("NOW() ON UPDATE NOW()")) @db.DateTime

  challenge                     Challenge @relation(fields: [challenge_id], references: [challenge_id], onDelete: Cascade, onUpdate: Cascade)
}


model UserChallenge {
  user_challenge_id Int      @default(autoincrement()) @unique
  affiliation_id    Int
  challenge_id      Int
  user_deposit      Int
  cheering_phrase  String?     @db.VarChar(255)
  cheering_phrase_date  DateTime?    @db.Date
  created_at        DateTime  @default(dbgenerated("NOW()")) @db.DateTime
  update_at         DateTime  @default(dbgenerated("NOW() ON UPDATE NOW()")) @db.DateTime

  user_templetes    UserTemplete[]

  affiliation       Affiliation @relation(fields: [affiliation_id], references: [affiliation_id], onDelete: Cascade, onUpdate: Cascade)
  challenge         Challenge @relation(fields: [challenge_id], references: [challenge_id], onDelete: Cascade, onUpdate: Cascade)

  @@id([ user_challenge_id, affiliation_id, challenge_id ])

}


model UserTemplete {
  user_templete_id Int         @id @default(autoincrement()) 
  user_challenge_id Int
  created_at       DateTime  @default(dbgenerated("NOW()")) @db.DateTime
  update_at        DateTime  @default(dbgenerated("NOW() ON UPDATE NOW()")) @db.DateTime
  finished_at      DateTime?    @db.Date
  complete         Boolean?

  question_contents QuestionContent[]
  likes            Likes[]
  comments         Comment[]

  user_challenges   UserChallenge @relation(fields: [user_challenge_id], references: [user_challenge_id], onDelete: Cascade, onUpdate: Cascade)
}


model QuestionContent {
  question_content_id Int         @default(autoincrement()) @unique
  question_id         Int
  user_templete_id    Int
  content             String      @db.Text
  visibility          Boolean
  created_at          DateTime  @default(dbgenerated("NOW()")) @db.DateTime
  update_at           DateTime  @default(dbgenerated("NOW() ON UPDATE NOW()")) @db.DateTime

  questions            Question    @relation(fields: [question_id], references: [question_id], onDelete: Cascade, onUpdate: Cascade)
  user_templetes       UserTemplete @relation(fields: [user_templete_id], references: [user_templete_id], onDelete: Cascade, onUpdate: Cascade)

  @@id([question_content_id, question_id, user_templete_id])
}



model Likes {
  like_id          Int         @default(autoincrement()) @unique
  affiliation_id   Int
  user_templete_id Int
  created_at       DateTime  @default(dbgenerated("NOW()")) @db.DateTime
  update_at        DateTime  @default(dbgenerated("NOW() ON UPDATE NOW()")) @db.DateTime

  affiliation      Affiliation        @relation(fields: [affiliation_id], references: [affiliation_id], onDelete: Cascade, onUpdate: Cascade)
  user_templete    UserTemplete @relation(fields: [user_templete_id], references: [user_templete_id], onDelete: Cascade, onUpdate: Cascade)

  @@id([like_id, affiliation_id, user_templete_id])
}

model Comment {
  comment_id          Int         @default(autoincrement()) @unique
  comment_group       Int?         
  user_templete_id    Int
  affiliation_id      Int
  content             String      @db.Text
  created_at          DateTime  @default(dbgenerated("NOW()")) @db.DateTime
  update_at           DateTime  @default(dbgenerated("NOW() ON UPDATE NOW()")) @db.DateTime


  comments_son        Comment[]  @relation("comments")

  user_templete       UserTemplete @relation(fields: [user_templete_id], references: [user_templete_id], onDelete: Cascade, onUpdate: Cascade)
  affiliation         Affiliation        @relation(fields: [affiliation_id], references: [affiliation_id], onDelete: Cascade, onUpdate: Cascade)
  comments            Comment?   @relation("comments", fields: [comment_group], references: [comment_id], onDelete: Cascade, onUpdate: Cascade) 

  @@id([comment_id, user_templete_id, affiliation_id])
 
}
